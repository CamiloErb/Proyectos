{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Camo\\\\Desktop\\\\codes\\\\excel\\\\src\\\\components\\\\Table\\\\Table.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Row from './Row';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Table extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.handleChangedCell = ({\n      x,\n      y\n    }, value) => {\n      const modifiedData = Object.assign({}, this.state.data);\n      if (!modifiedData[y]) modifiedData[y] = {};\n      modifiedData[y][x] = value;\n      this.setState({\n        data: modifiedData\n      });\n    };\n\n    this.updateCells = () => {\n      this.forceUpdate();\n    };\n\n    this.state = {\n      data: {}\n    };\n  }\n\n  render() {\n    const rows = [];\n\n    for (let y = 0; y < this.props.y + 1; y += 1) {\n      const rowData = this.state.data[y] || {};\n      rows.push( /*#__PURE__*/_jsxDEV(Row, {\n        handleChangedCell: this.handleChangedCell,\n        updateCells: this.updateCells,\n        y: y,\n        x: this.props.x + 1,\n        rowData: rowData\n      }, y, false, {\n        fileName: _jsxFileName,\n        lineNumber: 31,\n        columnNumber: 9\n      }, this));\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: rows\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 7\n    }, this);\n  }\n\n}\nTable.propTypes = {\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired\n};","map":{"version":3,"sources":["C:/Users/Camo/Desktop/codes/excel/src/components/Table/Table.js"],"names":["React","PropTypes","Row","Table","Component","constructor","props","handleChangedCell","x","y","value","modifiedData","Object","assign","state","data","setState","updateCells","forceUpdate","render","rows","rowData","push","propTypes","number","isRequired"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,GAAP,MAAgB,OAAhB;;AAEA,eAAe,MAAMC,KAAN,SAAoBH,KAAK,CAACI,SAA1B,CAAoC;AACjDC,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SAQnBC,iBARmB,GAQC,CAAC;AAAEC,MAAAA,CAAF;AAAKC,MAAAA;AAAL,KAAD,EAAWC,KAAX,KAAqB;AACvC,YAAMC,YAAY,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAKC,KAAL,CAAWC,IAA7B,CAArB;AACA,UAAI,CAACJ,YAAY,CAACF,CAAD,CAAjB,EAAsBE,YAAY,CAACF,CAAD,CAAZ,GAAkB,EAAlB;AACtBE,MAAAA,YAAY,CAACF,CAAD,CAAZ,CAAgBD,CAAhB,IAAqBE,KAArB;AACA,WAAKM,QAAL,CAAc;AAAED,QAAAA,IAAI,EAAEJ;AAAR,OAAd;AACD,KAbkB;;AAAA,SAenBM,WAfmB,GAeL,MAAM;AAClB,WAAKC,WAAL;AACD,KAjBkB;;AAGjB,SAAKJ,KAAL,GAAa;AACXC,MAAAA,IAAI,EAAE;AADK,KAAb;AAGD;;AAaDI,EAAAA,MAAM,GAAG;AACP,UAAMC,IAAI,GAAG,EAAb;;AAEA,SAAK,IAAIX,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAG,KAAKH,KAAL,CAAWG,CAAX,GAAe,CAAnC,EAAsCA,CAAC,IAAI,CAA3C,EAA8C;AAC5C,YAAMY,OAAO,GAAG,KAAKP,KAAL,CAAWC,IAAX,CAAgBN,CAAhB,KAAsB,EAAtC;AACAW,MAAAA,IAAI,CAACE,IAAL,eACE,QAAC,GAAD;AACE,QAAA,iBAAiB,EAAE,KAAKf,iBAD1B;AAEE,QAAA,WAAW,EAAE,KAAKU,WAFpB;AAIE,QAAA,CAAC,EAAER,CAJL;AAKE,QAAA,CAAC,EAAE,KAAKH,KAAL,CAAWE,CAAX,GAAe,CALpB;AAME,QAAA,OAAO,EAAEa;AANX,SAGOZ,CAHP;AAAA;AAAA;AAAA;AAAA,cADF;AAUD;;AACD,wBACE;AAAA,gBACGW;AADH;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAzCgD;AA4CnDjB,KAAK,CAACoB,SAAN,GAAkB;AAChBf,EAAAA,CAAC,EAAEP,SAAS,CAACuB,MAAV,CAAiBC,UADJ;AAEhBhB,EAAAA,CAAC,EAAER,SAAS,CAACuB,MAAV,CAAiBC;AAFJ,CAAlB","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Row from './Row'\r\n\r\nexport default class Table extends React.Component {\r\n  constructor(props) {\r\n    super(props)\r\n\r\n    this.state = {\r\n      data: {},\r\n    }\r\n  }\r\n\r\n  handleChangedCell = ({ x, y }, value) => {\r\n    const modifiedData = Object.assign({}, this.state.data)\r\n    if (!modifiedData[y]) modifiedData[y] = {}\r\n    modifiedData[y][x] = value\r\n    this.setState({ data: modifiedData })\r\n  }\r\n\r\n  updateCells = () => {\r\n    this.forceUpdate()\r\n  }\r\n\r\n  render() {\r\n    const rows = []\r\n\r\n    for (let y = 0; y < this.props.y + 1; y += 1) {\r\n      const rowData = this.state.data[y] || {}\r\n      rows.push(\r\n        <Row\r\n          handleChangedCell={this.handleChangedCell}\r\n          updateCells={this.updateCells}\r\n          key={y}\r\n          y={y}\r\n          x={this.props.x + 1}\r\n          rowData={rowData}\r\n        />,\r\n      )\r\n    }\r\n    return (\r\n      <div>\r\n        {rows}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nTable.propTypes = {\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n}"]},"metadata":{},"sourceType":"module"}