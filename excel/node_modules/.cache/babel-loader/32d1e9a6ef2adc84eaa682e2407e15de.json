{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Camo\\\\Desktop\\\\codes\\\\excel\\\\src\\\\components\\\\Cell\\\\Cell.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\n/**\r\n * Cell represents the atomic element of a table\r\n */\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class Cell extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.onChange = e => {\n      this.setState({\n        value: e.target.value\n      });\n      this.display = this.determineDisplay({\n        x: this.props.x,\n        y: this.props.y\n      }, e.target.value);\n    };\n\n    this.onKeyPressOnInput = e => {\n      if (e.key === 'Enter') {\n        this.hasNewValue(e.target.value);\n      }\n    };\n\n    this.onKeyPressOnSpan = () => {\n      if (!this.state.editing) {\n        this.setState({\n          editing: true\n        });\n      }\n    };\n\n    this.onBlur = e => {\n      this.hasNewValue(e.target.value);\n    };\n\n    this.handleUnselectAll = () => {\n      if (this.state.selected || this.state.editing) {\n        this.setState({\n          selected: false,\n          editing: false\n        });\n      }\n    };\n\n    this.hasNewValue = value => {\n      this.props.onChangedValue({\n        x: this.props.x,\n        y: this.props.y\n      }, value);\n      this.setState({\n        editing: false\n      });\n    };\n\n    this.emitUnselectAllEvent = () => {\n      const unselectAllEvent = new Event('unselectAll');\n      window.document.dispatchEvent(unselectAllEvent);\n    };\n\n    this.clicked = () => {\n      // Prevent click and double click to conflict\n      this.timer = setTimeout(() => {\n        if (!this.prevent) {\n          // Unselect all the other cells and set the current\n          // Cell state to `selected`\n          this.emitUnselectAllEvent();\n          this.setState({\n            selected: true\n          });\n        }\n\n        this.prevent = false;\n      }, this.delay);\n    };\n\n    this.doubleClicked = () => {\n      // Prevent click and double click to conflict\n      clearTimeout(this.timer);\n      this.prevent = true; // Unselect all the other cells and set the current\n      // Cell state to `selected` & `editing`\n\n      this.emitUnselectAllEvent();\n      this.setState({\n        editing: true,\n        selected: true\n      });\n    };\n\n    this.determineDisplay = ({\n      x,\n      y\n    }, value) => {\n      return value;\n    };\n\n    this.calculateCss = () => {\n      const css = {\n        width: '80px',\n        padding: '4px',\n        margin: '0',\n        height: '25px',\n        boxSizing: 'border-box',\n        position: 'relative',\n        display: 'inline-block',\n        color: 'black',\n        border: '1px solid #cacaca',\n        textAlign: 'left',\n        verticalAlign: 'top',\n        fontSize: '14px',\n        lineHeight: '15px',\n        overflow: 'hidden',\n        fontFamily: 'Calibri, \\'Segoe UI\\', Thonburi'\n      };\n\n      if (this.props.x === 0 || this.props.y === 0) {\n        css.textAlign = 'center';\n        css.backgroundColor = '#f0f0f0';\n        css.fontWeight = 'bold';\n      }\n\n      return css;\n    };\n\n    this.state = {\n      editing: false,\n      value: props.value\n    };\n    this.display = this.determineDisplay({\n      x: props.x,\n      y: props.y\n    }, props.value);\n    this.timer = 0;\n    this.delay = 200;\n    this.prevent = false;\n  }\n  /**\r\n   * Add listener to the `unselectAll` event used to broadcast the\r\n   * unselect all event\r\n   */\n\n\n  componentDidMount() {\n    window.document.addEventListener('unselectAll', this.handleUnselectAll);\n  }\n  /**\r\n   * Before updating, execute the formula on the Cell value to\r\n   * calculate the `display` value. Especially useful when a\r\n   * redraw is pushed upon this cell when editing another cell\r\n   * that this might depend upon\r\n   */\n\n\n  componentWillUpdate() {\n    this.display = this.determineDisplay({\n      x: this.props.x,\n      y: this.props.y\n    }, this.state.value);\n  }\n  /**\r\n   * Remove the `unselectAll` event listener added in\r\n   * `componentDidMount()`\r\n   */\n\n\n  componentWillUnmount() {\n    window.document.removeEventListener('unselectAll', this.handleUnselectAll);\n  }\n  /**\r\n   * When a Cell value changes, re-determine the display value\r\n   * by calling the formula calculation\r\n   */\n\n\n  render() {\n    const css = this.calculateCss(); // column 0\n\n    if (this.props.x === 0) {\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        style: css,\n        children: this.props.y\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 194,\n        columnNumber: 13\n      }, this);\n    } // row 0\n\n\n    if (this.props.y === 0) {\n      const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('');\n      return /*#__PURE__*/_jsxDEV(\"span\", {\n        onKeyPress: this.onKeyPressOnSpan,\n        style: css,\n        role: \"presentation\",\n        children: alpha[this.props.x]\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 13\n      }, this);\n    }\n\n    if (this.state.selected) {\n      css.outlineColor = 'lightblue';\n      css.outlineStyle = 'dotted';\n    }\n\n    if (this.state.editing) {\n      return /*#__PURE__*/_jsxDEV(\"input\", {\n        style: css,\n        type: \"text\",\n        onBlur: this.onBlur,\n        onKeyPress: this.onKeyPressOnInput,\n        value: this.state.value,\n        onChange: this.onChange,\n        autoFocus: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"span\", {\n      onClick: e => this.clicked(e),\n      onDoubleClick: e => this.doubleClicked(e),\n      style: css,\n      role: \"presentation\",\n      children: this.display\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 232,\n      columnNumber: 9\n    }, this);\n  }\n\n}\nCell.propTypes = {\n  onChangedValue: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  value: PropTypes.string.isRequired\n};","map":{"version":3,"sources":["C:/Users/Camo/Desktop/codes/excel/src/components/Cell/Cell.js"],"names":["React","PropTypes","Cell","Component","constructor","props","onChange","e","setState","value","target","display","determineDisplay","x","y","onKeyPressOnInput","key","hasNewValue","onKeyPressOnSpan","state","editing","onBlur","handleUnselectAll","selected","onChangedValue","emitUnselectAllEvent","unselectAllEvent","Event","window","document","dispatchEvent","clicked","timer","setTimeout","prevent","delay","doubleClicked","clearTimeout","calculateCss","css","width","padding","margin","height","boxSizing","position","color","border","textAlign","verticalAlign","fontSize","lineHeight","overflow","fontFamily","backgroundColor","fontWeight","componentDidMount","addEventListener","componentWillUpdate","componentWillUnmount","removeEventListener","render","alpha","split","outlineColor","outlineStyle","propTypes","func","isRequired","number","string"],"mappings":"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","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\n/**\r\n * Cell represents the atomic element of a table\r\n */\r\nexport default class Cell extends React.Component {\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            editing: false,\r\n            value: props.value,\r\n        }\r\n        this.display = this.determineDisplay(\r\n            { x: props.x, y: props.y },\r\n            props.value\r\n        )\r\n        this.timer = 0\r\n        this.delay = 200\r\n        this.prevent = false\r\n    }\r\n\r\n    /**\r\n     * Add listener to the `unselectAll` event used to broadcast the\r\n     * unselect all event\r\n     */\r\n    componentDidMount() {\r\n        window.document.addEventListener('unselectAll',\r\n            this.handleUnselectAll)\r\n    }\r\n\r\n    /**\r\n     * Before updating, execute the formula on the Cell value to\r\n     * calculate the `display` value. Especially useful when a\r\n     * redraw is pushed upon this cell when editing another cell\r\n     * that this might depend upon\r\n     */\r\n    componentWillUpdate() {\r\n        this.display = this.determineDisplay(\r\n            { x: this.props.x, y: this.props.y }, this.state.value)\r\n    }\r\n\r\n    /**\r\n     * Remove the `unselectAll` event listener added in\r\n     * `componentDidMount()`\r\n     */\r\n    componentWillUnmount() {\r\n        window.document.removeEventListener('unselectAll',\r\n            this.handleUnselectAll)\r\n    }\r\n\r\n    /**\r\n     * When a Cell value changes, re-determine the display value\r\n     * by calling the formula calculation\r\n     */\r\n    onChange = (e) => {\r\n        this.setState({ value: e.target.value })\r\n        this.display = this.determineDisplay(\r\n            { x: this.props.x, y: this.props.y }, e.target.value)\r\n    }\r\n\r\n    /**\r\n     * Handle pressing a key when the Cell is an input element\r\n     */\r\n    onKeyPressOnInput = (e) => {\r\n        if (e.key === 'Enter') {\r\n            this.hasNewValue(e.target.value)\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle pressing a key when the Cell is a span element,\r\n     * not yet in editing mode\r\n     */\r\n    onKeyPressOnSpan = () => {\r\n        if (!this.state.editing) {\r\n            this.setState({ editing: true })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Handle moving away from a cell, stores the new value\r\n     */\r\n    onBlur = (e) => {\r\n        this.hasNewValue(e.target.value)\r\n    }\r\n\r\n    /**\r\n     * Used by `componentDid(Un)Mount`, handles the `unselectAll`\r\n     * event response\r\n     */\r\n    handleUnselectAll = () => {\r\n        if (this.state.selected || this.state.editing) {\r\n            this.setState({ selected: false, editing: false })\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Called by the `onBlur` or `onKeyPressOnInput` event handlers,\r\n     * it escalates the value changed event, and restore the editing\r\n     * state to `false`.\r\n     */\r\n    hasNewValue = (value) => {\r\n        this.props.onChangedValue(\r\n            {\r\n                x: this.props.x,\r\n                y: this.props.y,\r\n            },\r\n            value,\r\n        )\r\n        this.setState({ editing: false })\r\n    }\r\n\r\n    /**\r\n     * Emits the `unselectAll` event, used to tell all the other\r\n     * cells to unselect\r\n     */\r\n    emitUnselectAllEvent = () => {\r\n        const unselectAllEvent = new Event('unselectAll')\r\n        window.document.dispatchEvent(unselectAllEvent)\r\n    }\r\n\r\n    /**\r\n     * Handle clicking a Cell.\r\n     */\r\n    clicked = () => {\r\n        // Prevent click and double click to conflict\r\n        this.timer = setTimeout(() => {\r\n            if (!this.prevent) {\r\n                // Unselect all the other cells and set the current\r\n                // Cell state to `selected`\r\n                this.emitUnselectAllEvent()\r\n                this.setState({ selected: true })\r\n            }\r\n            this.prevent = false\r\n        }, this.delay)\r\n    }\r\n\r\n    /**\r\n     * Handle doubleclicking a Cell.\r\n     */\r\n    doubleClicked = () => {\r\n        // Prevent click and double click to conflict\r\n        clearTimeout(this.timer)\r\n        this.prevent = true\r\n\r\n        // Unselect all the other cells and set the current\r\n        // Cell state to `selected` & `editing`\r\n        this.emitUnselectAllEvent()\r\n        this.setState({ editing: true, selected: true })\r\n    }\r\n\r\n    determineDisplay = ({ x, y }, value) => {\r\n        return value\r\n    }\r\n\r\n    /**\r\n     * Calculates a cell's CSS values\r\n     */\r\n    calculateCss = () => {\r\n        const css = {\r\n            width: '80px',\r\n            padding: '4px',\r\n            margin: '0',\r\n            height: '25px',\r\n            boxSizing: 'border-box',\r\n            position: 'relative',\r\n            display: 'inline-block',\r\n            color: 'black',\r\n            border: '1px solid #cacaca',\r\n            textAlign: 'left',\r\n            verticalAlign: 'top',\r\n            fontSize: '14px',\r\n            lineHeight: '15px',\r\n            overflow: 'hidden',\r\n            fontFamily: 'Calibri, \\'Segoe UI\\', Thonburi'\r\n    }\r\n\r\n    if(this.props.x === 0 || this.props.y === 0) {\r\n    css.textAlign = 'center'\r\n    css.backgroundColor = '#f0f0f0'\r\n    css.fontWeight = 'bold'\r\n}\r\n\r\nreturn css\r\n  }\r\n\r\nrender() {\r\n    const css = this.calculateCss()\r\n\r\n    // column 0\r\n    if (this.props.x === 0) {\r\n        return (\r\n            <span style={css}>\r\n                {this.props.y}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    // row 0\r\n    if (this.props.y === 0) {\r\n        const alpha = ' abcdefghijklmnopqrstuvwxyz'.split('')\r\n        return (\r\n            <span\r\n                onKeyPress={this.onKeyPressOnSpan}\r\n                style={css}\r\n                role=\"presentation\">\r\n                {alpha[this.props.x]}\r\n            </span>\r\n        )\r\n    }\r\n\r\n    if (this.state.selected) {\r\n        css.outlineColor = 'lightblue'\r\n        css.outlineStyle = 'dotted'\r\n    }\r\n\r\n    if (this.state.editing) {\r\n        return (\r\n            <input\r\n                style={css}\r\n                type=\"text\"\r\n                onBlur={this.onBlur}\r\n                onKeyPress={this.onKeyPressOnInput}\r\n                value={this.state.value}\r\n                onChange={this.onChange}\r\n                autoFocus\r\n            />\r\n        )\r\n    }\r\n    return (\r\n        <span\r\n            onClick={e => this.clicked(e)}\r\n            onDoubleClick={e => this.doubleClicked(e)}\r\n            style={css}\r\n            role=\"presentation\"\r\n        >\r\n            {this.display}\r\n        </span>\r\n    )\r\n}\r\n}\r\n\r\nCell.propTypes = {\r\n    onChangedValue: PropTypes.func.isRequired,\r\n    x: PropTypes.number.isRequired,\r\n    y: PropTypes.number.isRequired,\r\n    value: PropTypes.string.isRequired,\r\n}"]},"metadata":{},"sourceType":"module"}