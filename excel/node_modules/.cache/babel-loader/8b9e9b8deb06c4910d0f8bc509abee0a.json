{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Camo\\\\Desktop\\\\codes\\\\excel\\\\src\\\\components\\\\Row\\\\Row.js\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Cell from '../Cell/Cell';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Row = props => {\n  const cells = [];\n  const y = props.y;\n\n  for (let x = 0; x < props.x; x += 1) {\n    cells.push( /*#__PURE__*/_jsxDEV(Cell, {\n      y: y,\n      x: x,\n      onChangedValue: props.handleChangedCell,\n      updateCells: props.updateCells,\n      value: props.rowData[x] || ''\n    }, `${x}-${y}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 10,\n      columnNumber: 7\n    }, this));\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: cells\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 21,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Row;\nRow.propTypes = {\n  handleChangedCell: PropTypes.func.isRequired,\n  updateCells: PropTypes.func.isRequired,\n  x: PropTypes.number.isRequired,\n  y: PropTypes.number.isRequired,\n  rowData: PropTypes.shape({\n    string: PropTypes.string\n  }).isRequired\n};\nexport default Row;\n\nvar _c;\n\n$RefreshReg$(_c, \"Row\");","map":{"version":3,"sources":["C:/Users/Camo/Desktop/codes/excel/src/components/Row/Row.js"],"names":["React","PropTypes","Cell","Row","props","cells","y","x","push","handleChangedCell","updateCells","rowData","propTypes","func","isRequired","number","shape","string"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,SAAP,MAAsB,YAAtB;AACA,OAAOC,IAAP,MAAiB,cAAjB;;;AAEA,MAAMC,GAAG,GAAIC,KAAD,IAAW;AACrB,QAAMC,KAAK,GAAG,EAAd;AACA,QAAMC,CAAC,GAAGF,KAAK,CAACE,CAAhB;;AACA,OAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGH,KAAK,CAACG,CAA1B,EAA6BA,CAAC,IAAI,CAAlC,EAAqC;AACnCF,IAAAA,KAAK,CAACG,IAAN,eACE,QAAC,IAAD;AAEE,MAAA,CAAC,EAAEF,CAFL;AAGE,MAAA,CAAC,EAAEC,CAHL;AAIE,MAAA,cAAc,EAAEH,KAAK,CAACK,iBAJxB;AAKE,MAAA,WAAW,EAAEL,KAAK,CAACM,WALrB;AAME,MAAA,KAAK,EAAEN,KAAK,CAACO,OAAN,CAAcJ,CAAd,KAAoB;AAN7B,OACQ,GAAEA,CAAE,IAAGD,CAAE,EADjB;AAAA;AAAA;AAAA;AAAA,YADF;AAUD;;AACD,sBACE;AAAA,cACGD;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CApBD;;KAAMF,G;AAsBNA,GAAG,CAACS,SAAJ,GAAgB;AACdH,EAAAA,iBAAiB,EAAER,SAAS,CAACY,IAAV,CAAeC,UADpB;AAEdJ,EAAAA,WAAW,EAAET,SAAS,CAACY,IAAV,CAAeC,UAFd;AAGdP,EAAAA,CAAC,EAAEN,SAAS,CAACc,MAAV,CAAiBD,UAHN;AAIdR,EAAAA,CAAC,EAAEL,SAAS,CAACc,MAAV,CAAiBD,UAJN;AAKdH,EAAAA,OAAO,EAAEV,SAAS,CAACe,KAAV,CAAgB;AACvBC,IAAAA,MAAM,EAAEhB,SAAS,CAACgB;AADK,GAAhB,EAENH;AAPW,CAAhB;AAUA,eAAeX,GAAf","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Cell from '../Cell/Cell'\r\n\r\nconst Row = (props) => {\r\n  const cells = []\r\n  const y = props.y\r\n  for (let x = 0; x < props.x; x += 1) {\r\n    cells.push(\r\n      <Cell\r\n        key={`${x}-${y}`}\r\n        y={y}\r\n        x={x}\r\n        onChangedValue={props.handleChangedCell}\r\n        updateCells={props.updateCells}\r\n        value={props.rowData[x] || ''}\r\n      />,\r\n    )\r\n  }\r\n  return (\r\n    <div>\r\n      {cells}\r\n    </div>\r\n  )\r\n}\r\n\r\nRow.propTypes = {\r\n  handleChangedCell: PropTypes.func.isRequired,\r\n  updateCells: PropTypes.func.isRequired,\r\n  x: PropTypes.number.isRequired,\r\n  y: PropTypes.number.isRequired,\r\n  rowData: PropTypes.shape({\r\n    string: PropTypes.string,\r\n  }).isRequired,\r\n}\r\n\r\nexport default Row"]},"metadata":{},"sourceType":"module"}