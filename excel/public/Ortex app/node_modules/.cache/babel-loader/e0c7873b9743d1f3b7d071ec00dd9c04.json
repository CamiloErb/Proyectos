{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Camo\\\\Desktop\\\\ORTEX\\\\ortex-app\\\\src\\\\components\\\\EURUDSrate\\\\EURUSDrate.js\";\nimport io from \"socket.io-client\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst EURUSDrate = () => {\n  /*        \r\n  Please install socket.io-client V2.3.1:\r\n  npm i socket.io-client@2.3.1\r\n  Version 3 introduduced breaking changes that are incompatible with our server running V2\r\n  */\n  const socket = io(\"ws://stream.tradingeconomics.com/?client=guest:guest\", {\n    withCredentials: true,\n    transports: ['websocket', 'polling', 'flashsocket']\n  }); //Use the 'trial' as key to establish a 2-minute streaming connection with real-time data.\n  //After the 2-minute test, the server will drop the connection and block the IP for an Hour.\n  //var key = 'XXXXXXX' //YOUR LIVE-RATES SUBSCRIPTION KEY\n\n  socket.on('connect', function () {\n    console.log(socket.id);\n    console.log(socket.connected); // if you want to subscribe only specific instruments, emit instruments. To receive all instruments, comment the line below.\n\n    var instruments = '{\"topic\": \"subscribe\", \"to\": \"EURUSD:CUR\"}';\n    socket.emit(\"topic\", instruments, data => {\n      console.log(data);\n    });\n  });\n  socket.on(\"error\", error => {\n    console.log(error);\n  });\n  socket.on('rates', function (msg) {\n    //Do what you want with the Incoming Rates... Enjoy!\n    try {\n      let obj = JSON.parse(msg);\n      console.log(obj);\n    } catch (e) {\n      console.log(msg);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: \"hola\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 10\n  }, this);\n};\n\n_c = EURUSDrate;\nexport default EURUSDrate;\n\nvar _c;\n\n$RefreshReg$(_c, \"EURUSDrate\");","map":{"version":3,"sources":["C:/Users/Camo/Desktop/ORTEX/ortex-app/src/components/EURUDSrate/EURUSDrate.js"],"names":["io","EURUSDrate","socket","withCredentials","transports","on","console","log","id","connected","instruments","emit","data","error","msg","obj","JSON","parse","e"],"mappings":";AAAA,OAAOA,EAAP,MAAe,kBAAf;;;AACA,MAAMC,UAAU,GAAG,MAAM;AAEzB;AACA;AACA;AACA;AACA;AAEA,QAAMC,MAAM,GAAGF,EAAE,CAAC,sDAAD,EAAyD;AAACG,IAAAA,eAAe,EAAG,IAAnB;AAAyBC,IAAAA,UAAU,EAAE,CAAC,WAAD,EAAc,SAAd,EAAyB,aAAzB;AAArC,GAAzD,CAAjB,CARyB,CAUzB;AACA;AAEA;;AAGAF,EAAAA,MAAM,CAACG,EAAP,CAAU,SAAV,EAAqB,YAAW;AAC9BC,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACM,EAAnB;AACAF,IAAAA,OAAO,CAACC,GAAR,CAAYL,MAAM,CAACO,SAAnB,EAF8B,CAG9B;;AACA,QAAIC,WAAW,GAAG,4CAAlB;AACAR,IAAAA,MAAM,CAACS,IAAP,CAAY,OAAZ,EAAqBD,WAArB,EAAmCE,IAAD,IAAU;AAC1CN,MAAAA,OAAO,CAACC,GAAR,CAAYK,IAAZ;AACD,KAFD;AAID,GATD;AAYAV,EAAAA,MAAM,CAACG,EAAP,CAAU,OAAV,EAAoBQ,KAAD,IAAW;AAC5BP,IAAAA,OAAO,CAACC,GAAR,CAAYM,KAAZ;AACD,GAFD;AAIAX,EAAAA,MAAM,CAACG,EAAP,CAAU,OAAV,EAAmB,UAASS,GAAT,EAAc;AAE/B;AACA,QAAI;AACF,UAAIC,GAAG,GAAGC,IAAI,CAACC,KAAL,CAAWH,GAAX,CAAV;AACAR,MAAAA,OAAO,CAACC,GAAR,CAAYQ,GAAZ;AAED,KAJD,CAIE,OAAOG,CAAP,EAAU;AACVZ,MAAAA,OAAO,CAACC,GAAR,CAAYO,GAAZ;AACD;AAEF,GAXD;AAaE,sBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD,CA9CD;;KAAMb,U;AAgDN,eAAeA,UAAf","sourcesContent":["import io from \"socket.io-client\"\r\nconst EURUSDrate = () => {\r\n\r\n/*        \r\nPlease install socket.io-client V2.3.1:\r\nnpm i socket.io-client@2.3.1\r\nVersion 3 introduduced breaking changes that are incompatible with our server running V2\r\n*/\r\n\r\nconst socket = io(\"ws://stream.tradingeconomics.com/?client=guest:guest\", {withCredentials : true, transports: ['websocket', 'polling', 'flashsocket']})\r\n\r\n//Use the 'trial' as key to establish a 2-minute streaming connection with real-time data.\r\n//After the 2-minute test, the server will drop the connection and block the IP for an Hour.\r\n\r\n//var key = 'XXXXXXX' //YOUR LIVE-RATES SUBSCRIPTION KEY\r\n\r\n\r\nsocket.on('connect', function() {\r\n  console.log(socket.id)\r\n  console.log(socket.connected)\r\n  // if you want to subscribe only specific instruments, emit instruments. To receive all instruments, comment the line below.\r\n  var instruments = '{\"topic\": \"subscribe\", \"to\": \"EURUSD:CUR\"}'\r\n  socket.emit(\"topic\", instruments, (data) => {\r\n    console.log(data)\r\n  })\r\n  \r\n});\r\n\r\n\r\nsocket.on(\"error\", (error) => {\r\n  console.log(error)\r\n})\r\n\r\nsocket.on('rates', function(msg) {\r\n\r\n  //Do what you want with the Incoming Rates... Enjoy!\r\n  try {\r\n    let obj = JSON.parse(msg);\r\n    console.log(obj)\r\n\r\n  } catch (e) {\r\n    console.log(msg)\r\n  }\r\n\r\n});\r\n\r\n  return <div>hola</div>;\r\n};\r\n\r\nexport default EURUSDrate;\r\n\r\n\r\n\r\n"]},"metadata":{},"sourceType":"module"}